<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Ombi</name>
    </assembly>
    <members>
        <member name="M:Ombi.Controllers.CustomPageController.CustomPageSettings">
            <summary>
            Gets the Custom Page Settings.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.CustomPageController.CustomPageSettings(Ombi.Settings.Settings.Models.CustomPageSettings)">
            <summary>
            Saves the Custom Page Settings.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.External.EmbyController.SignIn(Ombi.Core.Settings.Models.External.EmbySettings)">
            <summary>
            Signs into the Emby Api
            </summary>
            <param name="request">The request.</param>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.External.EmbyController.EmbyUsers">
            <summary>
            Gets the emby users.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.External.JellyfinController.SignIn(Ombi.Core.Settings.Models.External.JellyfinSettings)">
            <summary>
            Signs into the Jellyfin Api
            </summary>
            <param name="request">The request.</param>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.External.JellyfinController.JellyfinUsers">
            <summary>
            Gets the jellyfin users.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.External.LidarrController.GetProfiles(Ombi.Settings.Settings.Models.External.LidarrSettings)">
            <summary>
            Gets the Lidarr profiles.
            </summary>
            <param name="settings">The settings.</param>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.External.LidarrController.GetRootFolders(Ombi.Settings.Settings.Models.External.LidarrSettings)">
            <summary>
            Gets the Lidarr root folders.
            </summary>
            <param name="settings">The settings.</param>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.External.LidarrController.GetMetadataProfiles(Ombi.Settings.Settings.Models.External.LidarrSettings)">
            <summary>
            Gets the Lidarr metadata profiles.
            </summary>
            <param name="settings">The settings.</param>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.External.LidarrController.GetProfiles">
            <summary>
            Gets the Lidarr profiles using the saved settings
            <remarks>The data is cached for an hour</remarks>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.External.LidarrController.GetRootFolders">
            <summary>
            Gets the Lidarr root folders using the saved settings.
            <remarks>The data is cached for an hour</remarks>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.External.PlexController.SignIn(Ombi.Api.Plex.Models.UserRequest)">
            <summary>
            Signs into the Plex API.
            </summary>
            <param name="request">The request.</param>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.External.PlexController.GetPlexLibraries(Ombi.Core.Settings.Models.External.PlexServers)">
            <summary>
            Gets the plex libraries.
            </summary>
            <param name="settings">The settings.</param>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.External.PlexController.GetServers">
            <summary>
            Gets the plex servers.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.External.PlexController.GetServers(Ombi.Api.Plex.Models.UserRequest)">
            <summary>
            Gets the plex servers.
            </summary>
            <param name="u">The u.</param>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.External.PlexController.GetFriends">
            <summary>
            Gets the plex friends.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.External.RadarrController.GetProfiles(Ombi.Settings.Settings.Models.External.RadarrSettings)">
            <summary>
            Gets the Radarr profiles.
            </summary>
            <param name="settings">The settings.</param>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.External.RadarrController.GetRootFolders(Ombi.Settings.Settings.Models.External.RadarrSettings)">
            <summary>
            Gets the Radarr root folders.
            </summary>
            <param name="settings">The settings.</param>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.External.RadarrController.GetProfiles">
            <summary>
            Gets the Radarr profiles using the saved settings
            <remarks>The data is cached for an hour</remarks>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.External.RadarrController.GetRootFolders">
            <summary>
            Gets the Radarr root folders using the saved settings.
            <remarks>The data is cached for an hour</remarks>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.External.RadarrController.GetTags(Ombi.Settings.Settings.Models.External.SonarrSettings)">
            <summary>
            Gets the Radarr tags
            </summary>
            <param name="settings">The settings.</param>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.External.RadarrController.GetTags">
            <summary>
            Gets the Radarr tags
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.External.SonarrController.GetProfiles(Ombi.Settings.Settings.Models.External.SonarrSettings)">
            <summary>
            Gets the Sonarr profiles.
            </summary>
            <param name="settings">The settings.</param>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.External.SonarrController.GetRootFolders(Ombi.Settings.Settings.Models.External.SonarrSettings)">
            <summary>
            Gets the Sonarr root folders.
            </summary>
            <param name="settings">The settings.</param>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.External.SonarrController.GetProfiles">
            <summary>
            Gets the Sonarr profiles.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.External.SonarrController.GetRootFolders">
            <summary>
            Gets the Sonarr root folders.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.External.SonarrController.GetLanguageProfiles">
            <summary>
            Gets the Sonarr V3 language profiles
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.External.SonarrController.GetTags(Ombi.Settings.Settings.Models.External.SonarrSettings)">
            <summary>
            Gets the Sonarr tags
            </summary>
            <param name="settings">The settings.</param>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.External.SonarrController.GetTags">
            <summary>
            Gets the Sonarr tags
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.External.SonarrController.GetLanguageProfiles(Ombi.Settings.Settings.Models.External.SonarrSettings)">
            <summary>
            Gets the Sonarr V3 language profiles
            </summary>
            <param name="settings">The settings.</param>
            <returns></returns>
        </member>
        <member name="T:Ombi.Controllers.V1.External.TesterController">
            <summary>
            The Tester Controller
            </summary>
        </member>
        <member name="M:Ombi.Controllers.V1.External.TesterController.#ctor(Ombi.Core.Notifications.INotificationService,Ombi.Notifications.Agents.IDiscordNotification,Ombi.Notifications.Agents.IEmailNotification,Ombi.Notifications.Agents.IPushbulletNotification,Ombi.Notifications.Agents.ISlackNotification,Ombi.Notifications.Agents.IPushoverNotification,Ombi.Notifications.Agents.IMattermostNotification,Ombi.Api.Plex.IPlexApi,Ombi.Api.Emby.IEmbyApiFactory,Ombi.Api.Radarr.IRadarrV3Api,Ombi.Api.Sonarr.ISonarrApi,Microsoft.Extensions.Logging.ILogger{Ombi.Controllers.V1.External.TesterController},Ombi.Notifications.IEmailProvider,Ombi.Api.CouchPotato.ICouchPotatoApi,Ombi.Notifications.Agents.ITelegramNotification,Ombi.Api.SickRage.ISickRageApi,Ombi.Schedule.Jobs.Ombi.INewsletterJob,Ombi.Notifications.Agents.ILegacyMobileNotification,Ombi.Api.Lidarr.ILidarrApi,Ombi.Notifications.Agents.IGotifyNotification,Ombi.Api.Twilio.IWhatsAppApi,Ombi.Core.Authentication.OmbiUserManager,Ombi.Notifications.Agents.IWebhookNotification,Ombi.Api.Jellyfin.IJellyfinApi)">
            <summary>
            Initializes a new instance of the <see cref="T:Ombi.Controllers.V1.External.TesterController" /> class.
            </summary>
        </member>
        <member name="M:Ombi.Controllers.V1.External.TesterController.Discord(Ombi.Settings.Settings.Models.Notifications.DiscordNotificationSettings)">
            <summary>
            Sends a test message to discord using the provided settings
            </summary>
            <param name="settings">The settings.</param>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.External.TesterController.Pushbullet(Ombi.Settings.Settings.Models.Notifications.PushbulletSettings)">
            <summary>
            Sends a test message to Pushbullet using the provided settings
            </summary>
            <param name="settings">The settings.</param>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.External.TesterController.Pushover(Ombi.Settings.Settings.Models.Notifications.PushoverSettings)">
            <summary>
            Sends a test message to Pushover using the provided settings
            </summary>
            <param name="settings">The settings.</param>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.External.TesterController.Gotify(Ombi.Settings.Settings.Models.Notifications.GotifySettings)">
            <summary>
            Sends a test message to Gotify using the provided settings
            </summary>
            <param name="settings">The settings.</param>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.External.TesterController.Webhook(Ombi.Settings.Settings.Models.Notifications.WebhookSettings)">
            <summary>
            Sends a test message to configured webhook using the provided settings
            </summary>
            <param name="settings">The settings.</param>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.External.TesterController.Mattermost(Ombi.Settings.Settings.Models.Notifications.MattermostNotificationSettings)">
            <summary>
            Sends a test message to mattermost using the provided settings
            </summary>
            <param name="settings">The settings.</param>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.External.TesterController.Slack(Ombi.Settings.Settings.Models.Notifications.SlackNotificationSettings)">
            <summary>
            Sends a test message to Slack using the provided settings
            </summary>
            <param name="settings">The settings.</param>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.External.TesterController.Email(Ombi.Settings.Settings.Models.Notifications.EmailNotificationSettings)">
            <summary>
            Sends a test message via email to the admin email using the provided settings
            </summary>
            <param name="settings">The settings.</param>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.External.TesterController.Plex(Ombi.Core.Settings.Models.External.PlexServers)">
            <summary>
            Checks if we can connect to Plex with the provided settings
            </summary>
            <param name="settings"></param>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.External.TesterController.Emby(Ombi.Core.Settings.Models.External.EmbyServers)">
            <summary>
            Checks if we can connect to Emby with the provided settings
            </summary>
            <param name="settings"></param>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.External.TesterController.Jellyfin(Ombi.Core.Settings.Models.External.JellyfinServers)">
            <summary>
             Checks if we can connect to Jellyfin with the provided settings
            </summary>
            <param name="settings"></param>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.External.TesterController.Radarr(Ombi.Settings.Settings.Models.External.RadarrSettings)">
            <summary>
            Checks if we can connect to Radarr with the provided settings
            </summary>
            <param name="settings"></param>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.External.TesterController.Sonarr(Ombi.Settings.Settings.Models.External.SonarrSettings)">
            <summary>
            Checks if we can connect to Sonarr with the provided settings
            </summary>
            <param name="settings"></param>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.External.TesterController.CouchPotato(Ombi.Settings.Settings.Models.External.CouchPotatoSettings)">
            <summary>
            Checks if we can connect to CouchPotato with the provided settings
            </summary>
            <param name="settings"></param>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.External.TesterController.Telegram(Ombi.Settings.Settings.Models.Notifications.TelegramSettings)">
            <summary>
            Sends a test message to Telegram using the provided settings
            </summary>
            <param name="settings">The settings.</param>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.External.TesterController.SickRage(Ombi.Settings.Settings.Models.External.SickRageSettings)">
            <summary>
            Sends a test message to Slack using the provided settings
            </summary>
            <param name="settings">The settings.</param>
            <returns></returns>
        </member>
        <member name="T:Ombi.Controllers.V1.IdentityController">
            <inheritdoc />
            <summary>
            The Identity Controller, the API for everything Identity/User related
            </summary>
        </member>
        <member name="M:Ombi.Controllers.V1.IdentityController.CreateWizardUser(Ombi.Models.CreateUserWizardModel)">
            <summary>
            This is what the Wizard will call when creating the user for the very first time.
            This should never be called after this.
            The reason why we return false if users exists is that this method doesn't have any 
            authorization and could be called from anywhere.
            </summary>
            <remarks>We have [AllowAnonymous] since when going through the wizard we do not have a JWT Token yet</remarks>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.IdentityController.GetAllUsers">
            <summary>
            Gets all users.
            </summary>
            <returns>Information about all users</returns>
        </member>
        <member name="M:Ombi.Controllers.V1.IdentityController.GetAllUsersDropdown">
            <summary>
            Gets all users for dropdown purposes.
            </summary>
            <returns>Basic Information about all users</returns>
        </member>
        <member name="M:Ombi.Controllers.V1.IdentityController.GetCurrentUser">
            <summary>
            Gets the current logged in user.
            </summary>
            <returns>Information about all users</returns>
        </member>
        <member name="M:Ombi.Controllers.V1.IdentityController.SetCurrentUserLanguage(Ombi.Models.Identity.UserLanguage)">
            <summary>
            Sets the current users language
            </summary>
        </member>
        <member name="M:Ombi.Controllers.V1.IdentityController.GetSupportedStreamingCountries">
            <summary>
            Returns the supported country codes that we have streaming data for
            </summary>
        </member>
        <member name="M:Ombi.Controllers.V1.IdentityController.SetCurrentUserCountryStreaming(Ombi.Models.Identity.CountryStreamingPreference)">
            <summary>
            Sets the current users country streaming preference
            </summary>
        </member>
        <member name="M:Ombi.Controllers.V1.IdentityController.GetUser(System.String)">
            <summary>
            Gets the user by the user id.
            </summary>
            <returns>Information about the user</returns>
        </member>
        <member name="M:Ombi.Controllers.V1.IdentityController.CreateUser(Ombi.Core.Models.UI.UserViewModel)">
            <summary>
            Creates the user.
            </summary>
            <param name = "user" > The user.</param>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.IdentityController.UpdateLocalUser(Ombi.Models.Identity.UpdateLocalUserModel)">
            <summary>
            This is for the local user to change their details.
            </summary>
            <param name="ui"></param>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.IdentityController.UpdateUser(Ombi.Core.Models.UI.UserViewModel)">
            <summary>
            Updates the user.
            </summary>
            <param name = "ui" > The user.</param>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.IdentityController.DeleteUser(System.String)">
            <summary>
            Deletes the user.
            </summary>
            <param name="userId">The user.</param>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.IdentityController.GetAllClaims">
            <summary>
            Gets all available claims in the system.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.IdentityController.SubmitResetPassword(Ombi.Models.Identity.SubmitPasswordReset)">
            <summary>
            Send out the email with the reset link
            </summary>
            <param name="email"></param>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.IdentityController.ResetPassword(Ombi.Models.Identity.ResetPasswordToken)">
            <summary>
            Resets the password
            </summary>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.IssuesController.Categories">
            <summary>
            Get's all categories
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.IssuesController.CreateCategory(Ombi.Store.Entities.Requests.IssueCategory)">
            <summary>
            Creates a new category
            </summary>
            <param name="cat"></param>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.IssuesController.DeleteCategory(System.Int32)">
            <summary>
            Deletes a Category
            </summary>
            <param name="catId"></param>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.IssuesController.GetIssues">
            <summary>
            Returns all the issues
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.IssuesController.GetIssues(System.Int32,System.Int32,Ombi.Store.Entities.Requests.IssueStatus)">
            <summary>
            Returns all the issues
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.IssuesController.GetIssueCount">
            <summary>
            Returns all the issues count
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.IssuesController.CreateIssue(Ombi.Store.Entities.Requests.Issues)">
            <summary>
            Create Movie Issue
            </summary>
        </member>
        <member name="M:Ombi.Controllers.V1.IssuesController.GetIssue(System.Int32)">
            <summary>
            Returns the issue by Id
            </summary>
        </member>
        <member name="M:Ombi.Controllers.V1.IssuesController.GetComments(System.Int32)">
            <summary>
            Get's all the issue comments by id
            </summary>
        </member>
        <member name="M:Ombi.Controllers.V1.IssuesController.AddComment(Ombi.Models.NewIssueCommentViewModel)">
            <summary>
            Adds a comment on an issue
            </summary>
        </member>
        <member name="M:Ombi.Controllers.V1.IssuesController.DeleteComment(System.Int32)">
            <summary>
            Deletes a comment on a issue
            </summary>
        </member>
        <member name="M:Ombi.Controllers.V1.JobController.ForceUpdate">
            <summary>
            Runs the update job
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.JobController.CheckForUpdate">
            <summary>
            Checks for an update
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.JobController.PlexUserImporter">
            <summary>
            Runs the Plex User importer
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.JobController.EmbyUserImporter">
            <summary>
            Runs the Emby User importer
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.JobController.JellyfinUserImporter">
            <summary>
            Runs the Jellyfin User importer
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.JobController.StartPlexContentCacher">
            <summary>
            Runs the Plex Content Cacher
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.JobController.ClearMediaServerData">
            <summary>
            Clear out the media server and resync
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.JobController.StartRecentlyAdded">
            <summary>
            Runs a smaller version of the content cacher
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.JobController.StartEmbyContentCacher">
            <summary>
            Runs the Emby Content Cacher
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.JobController.StartEmbyRecentlyAdded">
            <summary>
            Runs a smaller version of the content cacher
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.JobController.StartJellyfinContentCacher">
            <summary>
            Runs the Jellyfin Content Cacher
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.JobController.StartArrAvailabiltityChecker">
            <summary>
            Runs the Arr Availability Checker
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.JobController.StartNewsletter">
            <summary>
            Runs the newsletter
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.MusicRequestController.GetRequests(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets album requests.
            </summary>
            <param name="count">The count of items you want to return.</param>
            <param name="position">The position.</param>
            <param name="orderType"> The way we want to order.</param>
            <param name="statusType"></param>
            <param name="availabilityType"></param>
        </member>
        <member name="M:Ombi.Controllers.V1.MusicRequestController.GetTotalAlbums">
            <summary>
            Gets the total amount of album requests.
            </summary>
        </member>
        <member name="M:Ombi.Controllers.V1.MusicRequestController.GetRequests">
            <summary>
            Gets all album requests.
            </summary>
        </member>
        <member name="M:Ombi.Controllers.V1.MusicRequestController.RequestAlbum(Ombi.Core.Models.Requests.MusicAlbumRequestViewModel)">
            <summary>
            Requests a album.
            </summary>
            <param name="album">The album.</param>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.MusicRequestController.Search(System.String)">
            <summary>
            Searches for a specific album request
            </summary>
            <param name="searchTerm">The search term.</param>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.MusicRequestController.DeleteRequest(System.Int32)">
            <summary>
            Deletes the specified album request.
            </summary>
            <param name="requestId">The request identifier.</param>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.MusicRequestController.ApproveAlbum(Ombi.Core.Models.Requests.AlbumUpdateModel)">
            <summary>
            Approves the specified album request.
            </summary>
            <param name="model">The albums's ID</param>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.MusicRequestController.MarkAvailable(Ombi.Core.Models.Requests.AlbumUpdateModel)">
            <summary>
            Set's the specified album as available 
            </summary>
            <param name="model">The album's ID</param>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.MusicRequestController.MarkUnAvailable(Ombi.Core.Models.Requests.AlbumUpdateModel)">
            <summary>
            Set's the specified album as unavailable 
            </summary>
            <param name="model">The album's ID</param>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.MusicRequestController.Deny(Ombi.Core.Models.Requests.DenyAlbumModel)">
            <summary>
            Denies the specified album request.
            </summary>
            <param name="model">The album's ID</param>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.MusicRequestController.GetRemainingMusicRequests">
            <summary>
            Gets model containing remaining number of music requests.
            </summary>
        </member>
        <member name="M:Ombi.Controllers.V1.RecentlyAddedController.GetRecentlyAddedMovies">
            <summary>
            Returns the recently added movies for the past 7 days
            </summary>
        </member>
        <member name="M:Ombi.Controllers.V1.RecentlyAddedController.GetRecentlyAddedShows">
            <summary>
            Returns the recently added tv shows for the past 7 days
            </summary>
        </member>
        <member name="M:Ombi.Controllers.V1.RecentlyAddedController.GetRecentlyAddedShowsGrouped">
            <summary>
            Returns the recently added tv shows for the past 7 days and groups them by season
            </summary>
        </member>
        <member name="M:Ombi.Controllers.V1.RequestController.GetRequests(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets movie requests.
            </summary>
            <param name="count">The count of items you want to return.</param>
            <param name="position">The position.</param>
            <param name="orderType"> The way we want to order.</param>
            <param name="statusType"></param>
            <param name="availabilityType"></param>
        </member>
        <member name="M:Ombi.Controllers.V1.RequestController.GetMovieRequest(System.Int32)">
            <summary>
            Returns information about the Single Movie Request
            </summary>
            <param name="requestId">the movie request id</param>
        </member>
        <member name="M:Ombi.Controllers.V1.RequestController.GetTotalMovies">
            <summary>
            Gets the total amount of movie requests.
            </summary>
        </member>
        <member name="M:Ombi.Controllers.V1.RequestController.GetRequests">
            <summary>
            Gets all movie requests.
            </summary>
        </member>
        <member name="M:Ombi.Controllers.V1.RequestController.RequestMovie(Ombi.Core.Models.Requests.MovieRequestViewModel)">
            <summary>
            Requests a movie.
            </summary>
            <param name="movie">The movie.</param>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.RequestController.Search(System.String)">
            <summary>
            Searches for a specific movie request
            </summary>
            <param name="searchTerm">The search term.</param>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.RequestController.DeleteRequest(System.Int32)">
            <summary>
            Deletes the specified movie request.
            </summary>
            <param name="requestId">The request identifier.</param>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.RequestController.DeleteAllRequests">
            <summary>
            Deletes the all movie request.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.RequestController.UpdateRequest(Ombi.Store.Entities.Requests.MovieRequests)">
            <summary>
            Updates the specified movie request.
            </summary>
            <param name="model">The Movie's ID</param>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.RequestController.ApproveMovie(Ombi.Core.Models.Requests.MovieUpdateModel)">
            <summary>
            Approves the specified movie request.
            </summary>
            <param name="model">The Movie's ID</param>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.RequestController.MarkMovieAvailable(Ombi.Core.Models.Requests.MovieUpdateModel)">
            <summary>
            Set's the specified Movie as available 
            </summary>
            <param name="model">The Movie's ID</param>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.RequestController.MarkMovieUnAvailable(Ombi.Core.Models.Requests.MovieUpdateModel)">
            <summary>
            Set's the specified Movie as unavailable 
            </summary>
            <param name="model">The Movie's ID</param>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.RequestController.DenyMovie(Ombi.Core.Models.Requests.DenyMovieModel)">
            <summary>
            Denies the specified movie request.
            </summary>
            <param name="model">The Movie's ID</param>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.RequestController.GetTotalTV">
            <summary>
            Gets the total amount of TV requests.
            </summary>
        </member>
        <member name="M:Ombi.Controllers.V1.RequestController.GetTvRequests(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the tv requests.
            </summary>
            <param name="count">The count of items you want to return.</param>
            <param name="position">The position.</param>
            <param name="orderType"></param>
            <param name="statusType"></param>
            <param name="availabilityType"></param>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.RequestController.GetTvRequestsLite(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the tv requests lite.
            </summary>
            <param name="count">The count of items you want to return.</param>
            <param name="position">The position.</param>
            <param name="orderType"></param>
            <param name="statusType"></param>
            <param name="availabilityType"></param>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.RequestController.GetTvRequests">
            <summary>
            Gets the tv requests.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.RequestController.GetTvRequestsLite">
            <summary>
            Gets the tv requests without the whole object graph (Does not include seasons/episodes).
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.RequestController.GetTvRequest(System.Int32)">
            <summary>
            Returns the full request object for the specified requestId
            </summary>
            <param name="requestId"></param>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.RequestController.RequestTv(Ombi.Core.Models.Requests.TvRequestViewModel)">
            <summary>
            Requests a tv show/episode/season.
            </summary>
            <param name="tv">The tv.</param>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.RequestController.SearchTv(System.String)">
            <summary>
            Searches for a specific tv request
            </summary>
            <param name="searchTerm">The search term.</param>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.RequestController.DeleteTvRequest(System.Int32)">
            <summary>
            Deletes the a specific tv request
            </summary>
            <param name="requestId">The request identifier.</param>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.RequestController.UpdateRequest(Ombi.Store.Entities.Requests.TvRequests)">
            <summary>
            Updates the a specific tv request
            </summary>
            <param name="model">The model.</param>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.RequestController.UpdateRootFolder(System.Int32,System.Int32)">
            <summary>
            Updates the root path for this tv show
            </summary>
            <param name="requestId"></param>
            <param name="rootFolderId"></param>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.RequestController.UpdateQuality(System.Int32,System.Int32)">
            <summary>
            Updates the quality profile for this tv show
            </summary>
            <param name="requestId"></param>
            <param name="qualityId"></param>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.RequestController.UpdateChild(Ombi.Store.Entities.Requests.ChildRequests)">
            <summary>
            Updates the a specific child request
            </summary>
            <param name="child">The model.</param>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.RequestController.DenyChild(Ombi.Models.DenyTvModel)">
            <summary>
            Denies the a specific child request
            </summary>
            <param name="model">This is the child request's ID</param>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.RequestController.MarkTvAvailable(Ombi.Models.TvUpdateModel)">
            <summary>
            Set's the specified tv child as available 
            </summary>
            <param name="model">The Movie's ID</param>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.RequestController.MarkTvUnAvailable(Ombi.Models.TvUpdateModel)">
            <summary>
            Set's the specified tv child as unavailable 
            </summary>
            <param name="model">The Movie's ID</param>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.RequestController.ApproveChild(Ombi.Models.TvUpdateModel)">
            <summary>
            Updates the a specific child request
            </summary>
            <param name="model">This is the child request's ID</param>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.RequestController.DeleteChildRequest(System.Int32)">
            <summary>
            Deletes the a specific tv request
            </summary>
            <param name="requestId">The model.</param>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.RequestController.GetAllChildren(System.Int32)">
            <summary>
            Retuns all children requests for the request id
            </summary>
            <param name="requestId">The Request Id</param>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.RequestController.GetCountOfRequests">
            <summary>
            Gets the count of total requests
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.RequestController.UserHasRequest(System.String)">
            <summary>
            Checks if the passed in user has a request
            </summary>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.RequestController.SubscribeToMovie(System.Int32)">
            <summary>
            Subscribes for notifications to a movie request
            </summary>
        </member>
        <member name="M:Ombi.Controllers.V1.RequestController.SubscribeToTv(System.Int32)">
            <summary>
            Subscribes for notifications to a TV request
            </summary>
        </member>
        <member name="M:Ombi.Controllers.V1.RequestController.UnSubscribeToMovie(System.Int32)">
            <summary>
            UnSubscribes for notifications to a movie request
            </summary>
        </member>
        <member name="M:Ombi.Controllers.V1.RequestController.UnSubscribeToTv(System.Int32)">
            <summary>
            UnSubscribes for notifications to a TV request
            </summary>
        </member>
        <member name="M:Ombi.Controllers.V1.RequestController.GetRemainingMovieRequests">
            <summary>
            Gets model containing remaining number of movie requests.
            </summary>
        </member>
        <member name="M:Ombi.Controllers.V1.RequestController.GetRemainingTvRequests">
            <summary>
            Gets model containing remaining number of tv requests.
            </summary>
        </member>
        <member name="M:Ombi.Controllers.V1.RequestRetryController.GetFailedRequests">
            <summary>
            Get's all the failed requests that are currently in the queue
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.SearchController.SearchMovie(System.String)">
            <summary>
            Searches for a movie.
            </summary>
            <remarks>We use TheMovieDb as the Movie Provider</remarks>
            <param name="searchTerm">The search term.</param>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.SearchController.SearchActor(Ombi.Models.SearchActorModel)">
            <summary>
            Searches for movies by a certain actor.
            </summary>
            <param name="model">language code is optional, by default it will be en. Language code uses ISO 639-1</param>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.SearchController.SearchMovie(Ombi.Models.SearchMovieRefineModel)">
            <summary>
            Searches for a movie.
            </summary>
            <remarks>We use TheMovieDb as the Movie Provider</remarks>
            <param name="model">The refinement model, language code and year are both optional. Language code uses ISO 639-1</param>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.SearchController.GetExtraMovieInfo(System.Int32)">
            <summary>
            Gets extra information on the movie e.g. IMDBId
            </summary>
            <param name="theMovieDbId">The movie database identifier.</param>
            <returns></returns>
            <remarks>
            We use TheMovieDb as the Movie Provider
            </remarks>
        </member>
        <member name="M:Ombi.Controllers.V1.SearchController.GetExtraMovieInfo(Ombi.Models.SearchMovieExtraInfoRefineModel)">
            <summary>
            Gets extra information on the movie e.g. IMDBId
            </summary>
            <param name="model">TheMovieDb and Language Code, Pass in the language code (ISO 639-1) to get it back in a different lang </param>
            <returns></returns>
            <remarks>
            We use TheMovieDb as the Movie Provider
            </remarks>
        </member>
        <member name="M:Ombi.Controllers.V1.SearchController.SimilarMovies(Ombi.Models.SimilarMoviesRefineModel)">
            <summary>
            Returns similar movies to the movie id passed in
            </summary>
            <param name="model">the movie</param>
            <remarks>
            We use TheMovieDb as the Movie Provider
            </remarks>
        </member>
        <member name="M:Ombi.Controllers.V1.SearchController.SimilarMovies(System.Int32)">
            <summary>
            Returns similar movies to the movie id passed in
            </summary>
            <param name="theMovieDbId">ID of the movie</param>
            <remarks>
            We use TheMovieDb as the Movie Provider
            </remarks>
        </member>
        <member name="M:Ombi.Controllers.V1.SearchController.Popular">
            <summary>
            Returns Popular Movies
            </summary>
            <remarks>We use TheMovieDb as the Movie Provider</remarks>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.SearchController.NowPlayingMovies">
            <summary>
            Retuns Now Playing Movies
            </summary>
            <remarks>We use TheMovieDb as the Movie Provider</remarks>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.SearchController.TopRatedMovies">
            <summary>
            Returns top rated movies.
            </summary>
            <returns></returns>
            <remarks>We use TheMovieDb as the Movie Provider</remarks>
        </member>
        <member name="M:Ombi.Controllers.V1.SearchController.UpcomingMovies">
            <summary>
            Returns Upcoming movies.
            </summary>
            <remarks>We use TheMovieDb as the Movie Provider</remarks>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.SearchController.SearchTv(System.String)">
            <summary>
            Searches for a Tv Show.
            </summary>
            <param name="searchTerm">The search term.</param>
            <remarks>We use TvMaze as the Provider</remarks>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.SearchController.GetShowInfo(System.String)">
            <summary>
            Gets extra show information.
            </summary>
            <param name="tvdbId">The TVDB identifier.</param>
            <remarks>We use TvMaze as the Provider</remarks>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.SearchController.PopularTv">
            <summary>
            Returns Popular Tv Shows
            </summary>
            <remarks>We use Trakt.tv as the Provider</remarks>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.SearchController.AnticipatedTv">
            <summary>
            Returns most Anticiplateds tv shows.
            </summary>
            <remarks>We use Trakt.tv as the Provider</remarks>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.SearchController.MostWatched">
            <summary>
            Returns Most watched shows.
            </summary>
            <remarks>We use Trakt.tv as the Provider</remarks>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.SearchController.Trending">
            <summary>
            Returns trending shows
            </summary>
            <remarks>We use Trakt.tv as the Provider</remarks>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.SearchController.SearchArtist(System.String)">
            <summary>
            Returns the artist information we searched for
            </summary>
            <remarks>We use Lidarr as the Provider</remarks>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.SearchController.SearchAlbum(System.String)">
            <summary>
            Returns the album information we searched for
            </summary>
            <remarks>We use Lidarr as the Provider</remarks>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.SearchController.GetAlbumInformation(System.String)">
            <summary>
            Returns the album information specified by the foreignAlbumId passed in
            </summary>
            <remarks>We use Lidarr as the Provider</remarks>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.SearchController.GetAlbumsByArtist(System.String)">
            <summary>
            Returns all albums for the artist using the ForeignArtistId
            </summary>
            <remarks>We use Lidarr as the Provider</remarks>
            <returns></returns>
        </member>
        <member name="T:Ombi.Controllers.V1.SettingsController">
            <inheritdoc />
            <summary>
            The Settings Controller
            </summary>
        </member>
        <member name="M:Ombi.Controllers.V1.SettingsController.OmbiSettings">
            <summary>
            Gets the Ombi settings.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.SettingsController.GetBaseUrl">
            <summary>
            Gets the base url.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.SettingsController.OmbiSettings(Ombi.Settings.Settings.Models.OmbiSettings)">
            <summary>
            Save the Ombi settings.
            </summary>
            <param name="ombi">The ombi.</param>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.SettingsController.PlexSettings">
            <summary>
            Gets the Plex Settings.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.SettingsController.PlexSettings(Ombi.Core.Settings.Models.External.PlexSettings)">
            <summary>
            Save the Plex settings.
            </summary>
            <param name="plex">The plex.</param>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.SettingsController.EmbySettings">
            <summary>
            Gets the Emby Settings.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.SettingsController.EmbySettings(Ombi.Core.Settings.Models.External.EmbySettings)">
            <summary>
            Save the Emby settings.
            </summary>
            <param name="emby">The emby.</param>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.SettingsController.JellyfinSettings">
            <summary>
            Gets the Jellyfin Settings.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.SettingsController.JellyfinSettings(Ombi.Core.Settings.Models.External.JellyfinSettings)">
            <summary>
            Save the Jellyfin settings.
            </summary>
            <param name="jellyfin">The jellyfin.</param>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.SettingsController.LandingPageSettings">
            <summary>
            Gets the Landing Page Settings.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.SettingsController.LandingPageSettings(Ombi.Core.Settings.Models.LandingPageSettings)">
            <summary>
            Save the Landing Page settings.
            </summary>
            <param name="settings">The settings.</param>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.SettingsController.CustomizationSettings">
            <summary>
            Gets the Customization Settings.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.SettingsController.GetDefaultLanguage">
            <summary>
            Gets the default language set in Ombi
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.SettingsController.CustomizationSettings(Ombi.Settings.Settings.Models.CustomizationSettings)">
            <summary>
            Save the Customization settings.
            </summary>
            <param name="settings">The settings.</param>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.SettingsController.GetThemes">
            <summary>
            Get's the preset themes available
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.SettingsController.SonarrSettings">
            <summary>
            Gets the Sonarr Settings.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.SettingsController.SonarrSettings(Ombi.Settings.Settings.Models.External.SonarrSettings)">
            <summary>
            Save the Sonarr settings.
            </summary>
            <param name="settings">The settings.</param>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.SettingsController.RadarrSettings">
            <summary>
            Gets the Radarr Settings.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.SettingsController.LidarrSettings">
            <summary>
            Gets the Lidarr Settings.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.SettingsController.LidarrEnabled">
            <summary>
            Gets the Lidarr Settings.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.SettingsController.LidarrSettings(Ombi.Settings.Settings.Models.External.LidarrSettings)">
            <summary>
            Save the Lidarr settings.
            </summary>
            <param name="settings">The settings.</param>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.SettingsController.AuthenticationsSettings(Ombi.Settings.Settings.Models.AuthenticationSettings)">
            <summary>
            Save the Authentication settings.
            </summary>
            <param name="settings">The settings.</param>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.SettingsController.AuthenticationsSettings">
            <summary>
            Gets the Authentication Settings.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.SettingsController.RadarrSettings(Ombi.Settings.Settings.Models.External.RadarrSettings)">
            <summary>
            Save the Radarr settings.
            </summary>
            <param name="settings">The settings.</param>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.SettingsController.UpdateSettings(Ombi.Settings.Settings.Models.UpdateSettings)">
            <summary>
            Save the Update settings.
            </summary>
            <param name="settings">The settings.</param>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.SettingsController.UserManagementSettings">
            <summary>
            Gets the UserManagement Settings.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.SettingsController.UserManagementSettings(Ombi.Settings.Settings.Models.UserManagementSettings)">
            <summary>
            Save the UserManagement settings.
            </summary>
            <param name="settings">The settings.</param>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.SettingsController.UpdateSettings">
            <summary>
            Gets the Update Settings.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.SettingsController.CouchPotatoSettings">
            <summary>
            Gets the CouchPotatoSettings Settings.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.SettingsController.CouchPotatoSettings(Ombi.Settings.Settings.Models.External.CouchPotatoSettings)">
            <summary>
            Save the CouchPotatoSettings settings.
            </summary>
            <param name="settings">The settings.</param>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.SettingsController.DogNzbSettings">
            <summary>
            Gets the DogNzbSettings Settings.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.SettingsController.DogNzbSettings(Ombi.Settings.Settings.Models.External.DogNzbSettings)">
            <summary>
            Save the DogNzbSettings settings.
            </summary>
            <param name="settings">The settings.</param>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.SettingsController.SickRageSettings(Ombi.Settings.Settings.Models.External.SickRageSettings)">
            <summary>
            Save the SickRage settings.
            </summary>
            <param name="settings">The settings.</param>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.SettingsController.SickRageSettings">
            <summary>
            Gets the SickRage Settings.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.SettingsController.JobSettings">
            <summary>
            Gets the JobSettings Settings.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.SettingsController.JobSettings(Ombi.Settings.Settings.Models.JobSettings)">
            <summary>
            Save the JobSettings settings.
            </summary>
            <param name="settings">The settings.</param>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.SettingsController.IssueSettings(Ombi.Settings.Settings.Models.IssueSettings)">
            <summary>
            Save the Vote settings.
            </summary>
            <param name="settings">The settings.</param>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.SettingsController.IssueSettings">
            <summary>
            Gets the Issues Settings.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.SettingsController.VoteSettings(Ombi.Settings.Settings.Models.VoteSettings)">
            <summary>
            Save the Vote settings.
            </summary>
            <param name="settings">The settings.</param>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.SettingsController.VoteSettings">
            <summary>
            Gets the Vote Settings.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.SettingsController.TheMovieDbSettings(Ombi.Core.Settings.Models.External.TheMovieDbSettings)">
            <summary>
            Save The Movie DB settings.
            </summary>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:Ombi.Controllers.V1.SettingsController.TheMovieDbSettings">
            <summary>
            Get The Movie DB settings.
            </summary>
        </member>
        <member name="M:Ombi.Controllers.V1.SettingsController.EmailNotificationSettings(Ombi.Core.Models.UI.EmailNotificationsViewModel)">
            <summary>
            Saves the email notification settings.
            </summary>
            <param name="model">The model.</param>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.SettingsController.EmailNotificationSettings">
            <summary>
            Gets the Email Notification Settings.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.SettingsController.EmailNotificationSettingsEnabled">
            <summary>
            Gets the Email Notification Settings.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.SettingsController.DiscordNotificationSettings(Ombi.Core.Models.UI.DiscordNotificationsViewModel)">
            <summary>
            Saves the discord notification settings.
            </summary>
            <param name="model">The model.</param>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.SettingsController.DiscordNotificationSettings">
            <summary>
            Gets the discord Notification Settings.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.SettingsController.TelegramNotificationSettings(Ombi.Core.Models.UI.TelegramNotificationsViewModel)">
            <summary>
            Saves the telegram notification settings.
            </summary>
            <param name="model">The model.</param>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.SettingsController.TelegramNotificationSettings">
            <summary>
            Gets the telegram Notification Settings.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.SettingsController.PushbulletNotificationSettings(Ombi.Core.Models.UI.PushbulletNotificationViewModel)">
            <summary>
            Saves the pushbullet notification settings.
            </summary>
            <param name="model">The model.</param>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.SettingsController.PushbulletNotificationSettings">
            <summary>
            Gets the pushbullet Notification Settings.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.SettingsController.PushoverNotificationSettings(Ombi.Core.Models.UI.PushoverNotificationViewModel)">
            <summary>
            Saves the pushover notification settings.
            </summary>
            <param name="model">The model.</param>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.SettingsController.PushoverNotificationSettings">
            <summary>
            Gets the pushover Notification Settings.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.SettingsController.SlacktNotificationSettings(Ombi.Core.Models.UI.SlackNotificationsViewModel)">
            <summary>
            Saves the slack notification settings.
            </summary>
            <param name="model">The model.</param>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.SettingsController.SlackNotificationSettings">
            <summary>
            Gets the slack Notification Settings.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.SettingsController.MattermostNotificationSettings(Ombi.Core.Models.UI.MattermostNotificationsViewModel)">
            <summary>
            Saves the Mattermost notification settings.
            </summary>
            <param name="model">The model.</param>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.SettingsController.MattermostNotificationSettings">
            <summary>
            Gets the Mattermost Notification Settings.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.SettingsController.TwilioNotificationSettings">
            <summary>
            Gets the Twilio Notification Settings.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.SettingsController.TwilioNotificationSettings(Ombi.Core.Models.UI.TwilioSettingsViewModel)">
            <summary>
            Saves the Mattermost notification settings.
            </summary>
            <param name="model">The model.</param>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.SettingsController.MobileNotificationSettings(Ombi.Core.Models.UI.MobileNotificationsViewModel)">
            <summary>
            Saves the Mobile notification settings.
            </summary>
            <param name="model">The model.</param>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.SettingsController.MobileNotificationSettings">
            <summary>
            Gets the Mobile Notification Settings.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.SettingsController.GotifyNotificationSettings(Ombi.Core.Models.UI.GotifyNotificationViewModel)">
            <summary>
            Saves the gotify notification settings.
            </summary>
            <param name="model">The model.</param>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.SettingsController.GotifyNotificationSettings">
            <summary>
            Gets the gotify Notification Settings.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.SettingsController.WebhookNotificationSettings(Ombi.Core.Models.UI.WebhookNotificationViewModel)">
            <summary>
            Saves the webhook notification settings.
            </summary>
            <param name="model">The model.</param>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.SettingsController.WebhookNotificationSettings">
            <summary>
            Gets the webhook notification settings.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.SettingsController.NewsletterSettings(Ombi.Core.Models.UI.NewsletterNotificationViewModel)">
            <summary>
            Saves the Newsletter notification settings.
            </summary>
            <param name="model">The model.</param>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.SettingsController.NewsletterSettings">
            <summary>
            Gets the Newsletter Notification Settings.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.StatusController.GetStatus">
            <summary>
            Gets the status of Ombi.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.StatusController.GetInfo">
            <summary>
            Returns information about this ombi instance
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.StatusController.WizardStatus">
            <summary>
            Checks to see if we have run through the wizard
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.TokenController.GetToken(Ombi.Models.UserAuthModel)">
            <summary>
            Gets the token.
            </summary>
            <param name="model">The model.</param>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.TokenController.GetTokenWithPlexToken(Ombi.Models.External.PlexTokenAuthentication)">
            <summary>
            Returns the Token for the Ombi User if we can match the Plex user with a valid Ombi User
            </summary>
        </member>
        <member name="M:Ombi.Controllers.V1.TokenController.RefreshToken(Ombi.Controllers.V1.TokenController.TokenRefresh)">
            <summary>
            Refreshes the token.
            </summary>
            <param name="token">The model.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Ombi.Controllers.V1.VoteController.GetView">
            <summary>
            Returns the viewmodel to render on the UI
            </summary>
        </member>
        <member name="M:Ombi.Controllers.V1.VoteController.UpvoteMovie(System.Int32)">
            <summary>
            Upvotes a movie
            </summary>
        </member>
        <member name="M:Ombi.Controllers.V1.VoteController.UpvoteTv(System.Int32)">
            <summary>
            Upvotes a tv show
            </summary>
        </member>
        <member name="M:Ombi.Controllers.V1.VoteController.UpvoteAlbum(System.Int32)">
            <summary>
            Upvotes a album
            </summary>
        </member>
        <member name="M:Ombi.Controllers.V1.VoteController.DownvoteMovie(System.Int32)">
            <summary>
            Downvotes a movie
            </summary>
        </member>
        <member name="M:Ombi.Controllers.V1.VoteController.DownvoteTv(System.Int32)">
            <summary>
            Downvotes a tv show
            </summary>
        </member>
        <member name="M:Ombi.Controllers.V1.VoteController.DownvoteAlbum(System.Int32)">
            <summary>
            Downvotes a album
            </summary>
        </member>
        <member name="M:Ombi.Controllers.V1.VoteController.MovieVotes(System.Int32)">
            <summary>
            Get's all the votes for the request id
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.VoteController.MusicVotes(System.Int32)">
            <summary>
            Get's all the votes for the request id
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V1.VoteController.TvVotes(System.Int32)">
            <summary>
            Get's all the votes for the request id
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.External.TheMovieDbController.GetKeywords(System.String)">
            <summary>
            Searches for keywords matching the specified term.
            </summary>
            <param name="searchTerm">The search term.</param>
        </member>
        <member name="M:Ombi.Controllers.External.TheMovieDbController.GetKeywords(System.Int32)">
            <summary>
            Gets the keyword matching the specified ID.
            </summary>
            <param name="keywordId">The keyword ID.</param>
        </member>
        <member name="M:Ombi.Controllers.External.TheMovieDbController.GetGenres(System.String)">
            <summary>
            Gets the genres for either Tv or Movies depending on media type
            </summary>
            <param name="media">Either `tv` or `movie`.</param>
        </member>
        <member name="M:Ombi.Controllers.External.TheMovieDbController.GetWatchProvidersMovies(System.String)">
            <summary>
            Searches for the watch providers matching the specified term.
            </summary>
            <param name="searchTerm">The search term.</param>
        </member>
        <member name="M:Ombi.Controllers.External.TheMovieDbController.GetWatchProvidersTv(System.String)">
            <summary>
            Searches for the watch providers matching the specified term.
            </summary>
            <param name="searchTerm">The search term.</param>
        </member>
        <member name="M:Ombi.Controllers.V2.HubController.GetConnectedUsers">
            <summary>
            Returns the currently connected users in Ombi
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V2.RequestsController.GetRequests(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Gets movie requests.
            </summary>
            <param name="count">The count of items you want to return. e.g. 30</param>
            <param name="position">The position. e.g. position 60 for a 2nd page (since we have already got the first 30 items)</param>
            <param name="sort">The item to sort on e.g. "requestDate"</param>
            <param name="sortOrder">asc or desc</param>
        </member>
        <member name="M:Ombi.Controllers.V2.RequestsController.GetNotAvailableRequests(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Gets the unavailable movie requests.
            </summary>
            <param name="count">The count of items you want to return. e.g. 30</param>
            <param name="position">The position. e.g. position 60 for a 2nd page (since we have already got the first 30 items)</param>
            <param name="sort">The item to sort on e.g. "requestDate"</param>
            <param name="sortOrder">asc or desc</param>
        </member>
        <member name="M:Ombi.Controllers.V2.RequestsController.GetTvRequests(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Gets Tv requests.
            </summary>
            <param name="count">The count of items you want to return. e.g. 30</param>
            <param name="position">The position. e.g. position 60 for a 2nd page (since we have already got the first 30 items)</param>
            <param name="sort">The item to sort on e.g. "requestDate"</param>
            <param name="sortOrder">asc or desc</param>
        </member>
        <member name="M:Ombi.Controllers.V2.RequestsController.GetNotAvailableTvRequests(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Gets unavailable Tv requests.
            </summary>
            <param name="count">The count of items you want to return. e.g. 30</param>
            <param name="position">The position. e.g. position 60 for a 2nd page (since we have already got the first 30 items)</param>
            <param name="sort">The item to sort on e.g. "requestDate"</param>
            <param name="sortOrder">asc or desc</param>
        </member>
        <member name="M:Ombi.Controllers.V2.RequestsController.RequestTv(Ombi.Core.Models.Requests.TvRequestViewModelV2)">
            <summary>
            Requests a tv show/episode/season.
            </summary>
            <param name="tv">The tv.</param>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V2.SearchController.MultiSearch(System.String,Ombi.Core.Models.Search.V2.MultiSearchFilter)">
            <summary>
            Returns search results for both TV and Movies
            </summary>
            <remarks>The ID's returned by this are all TheMovieDbID's even for the TV Shows. You can call <see cref="M:Ombi.Controllers.V2.SearchController.GetTvInfoByMovieId(System.String)"/> to get TV
             Show information using the MovieDbId.</remarks>
            <param name="searchTerm">The search you want, this can be for a movie or TV show e.g. Star Wars will return
             all Star Wars movies and Star Wars Rebels the TV Sho</param>
            <param name="filter">Filter for the search</param>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V2.SearchController.GetMovieInfo(System.Int32)">
            <summary>
            Returns details for a single movie
            </summary>
            <param name="movieDbId">The MovieDB Id</param>
        </member>
        <member name="M:Ombi.Controllers.V2.SearchController.GetMovieByRequest(System.Int32)">
            <summary>
            Returns details for a single movie
            </summary>
        </member>
        <member name="M:Ombi.Controllers.V2.SearchController.GetMovieCollections(System.Int32)">
            <summary>
            Returns basic information about the provided collection
            </summary>
            <param name="collectionId">The collection id from TheMovieDb</param>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V2.SearchController.GetTvInfo(System.String)">
            <summary>
            Returns details for a single show
            </summary>
            <remarks>TVMaze is the TV Show Provider</remarks>
            <param name="tvdbid">The TVDB Id</param>
        </member>
        <member name="M:Ombi.Controllers.V2.SearchController.GetTvInfoByRequest(System.Int32)">
            <summary>
            Returns details for a single show
            </summary>
            <remarks>TVMaze is the TV Show Provider</remarks>
            
        </member>
        <member name="M:Ombi.Controllers.V2.SearchController.GetTvInfoByMovieId(System.String)">
            <summary>
            Returns details for a single show
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V2.SearchController.SimilarMovies(Ombi.Models.SimilarMoviesRefineModel)">
            <summary>
            Returns similar movies to the movie id passed in
            </summary>
            <remarks>
            We use TheMovieDb as the Movie Provider
            </remarks>
        </member>
        <member name="M:Ombi.Controllers.V2.SearchController.Popular">
            <summary>
            Returns Popular Movies
            </summary>
            <remarks>We use TheMovieDb as the Movie Provider</remarks>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V2.SearchController.Popular(System.Int32,System.Int32)">
            <summary>
            Returns Popular Movies using paging
            </summary>
            <remarks>We use TheMovieDb as the Movie Provider</remarks>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V2.SearchController.AdvancedSearchMovie(Ombi.Api.TheMovieDb.Models.DiscoverModel,System.Int32,System.Int32)">
            <summary>
            Returns Advanced Searched Media using paging
            </summary>
            <remarks>We use TheMovieDb as the Movie Provider</remarks>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V2.SearchController.Seasonal(System.Int32,System.Int32)">
            <summary>
            Returns Seasonal Movies
            </summary>
            <remarks>We use TheMovieDb as the Movie Provider</remarks>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V2.SearchController.RecentlyRequestedMovies(System.Int32,System.Int32)">
            <summary>
            Returns Recently Requested Movies using Paging
            </summary>
            <remarks>We use TheMovieDb as the Movie Provider</remarks>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V2.SearchController.RecentlyRequestedTv(System.Int32,System.Int32)">
            <summary>
            Returns Recently Requested Tv using Paging
            </summary>
            <remarks>We use TheMovieDb as the Movie Provider</remarks>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V2.SearchController.NowPlayingMovies">
            <summary>
            Returns Now Playing Movies
            </summary>
            <remarks>We use TheMovieDb as the Movie Provider</remarks>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V2.SearchController.NowPlayingMovies(System.Int32,System.Int32)">
            <summary>
            Returns Now Playing Movies by page
            </summary>
            <remarks>We use TheMovieDb as the Movie Provider</remarks>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V2.SearchController.TopRatedMovies">
            <summary>
            Returns top rated movies.
            </summary>
            <returns></returns>
            <remarks>We use TheMovieDb as the Movie Provider</remarks>
        </member>
        <member name="M:Ombi.Controllers.V2.SearchController.TopRatedMovies(System.Int32,System.Int32)">
            <summary>
            Returns top rated movies by page.
            </summary>
            <returns></returns>
            <remarks>We use TheMovieDb as the Movie Provider</remarks>
        </member>
        <member name="M:Ombi.Controllers.V2.SearchController.UpcomingMovies">
            <summary>
            Returns Upcoming movies.
            </summary>
            <remarks>We use TheMovieDb as the Movie Provider</remarks>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V2.SearchController.UpcomingMovies(System.Int32,System.Int32)">
            <summary>
            Returns Upcoming movies by page.
            </summary>
            <remarks>We use TheMovieDb as the Movie Provider</remarks>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V2.SearchController.PopularTv(System.Int32,System.Int32)">
            <summary>
            Returns Popular Tv Shows
            </summary>
            <remarks>We use Trakt.tv as the Provider</remarks>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V2.SearchController.AnticipatedTv(System.Int32,System.Int32)">
            <summary>
            Returns most Anticipated tv shows by page.
            </summary>
            <remarks>We use Trakt.tv as the Provider</remarks>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V2.SearchController.MostWatched(System.Int32,System.Int32)">
            <summary>
            Returns Most watched shows by page.
            </summary>
            <remarks>We use Trakt.tv as the Provider</remarks>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V2.SearchController.Trending(System.Int32,System.Int32)">
            <summary>
            Returns trending shows by page
            </summary>
            <remarks>We use Trakt.tv as the Provider</remarks>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V2.SearchController.GetMoviesByActor(System.Int32)">
            <summary>
            Returns all the movies that is by the actor id 
            </summary>
            <param name="actorId">TheMovieDb Actor ID</param>
            <returns></returns>
        </member>
        <member name="M:Ombi.Controllers.V2.SearchController.GetTvByActor(System.Int32)">
            <summary>
            Returns all the tv shows that is by the actor id 
            </summary>
            <param name="actorId">TheMovieDb Actor ID</param>
            <returns></returns>
        </member>
    </members>
</doc>
